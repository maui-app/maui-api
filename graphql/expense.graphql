
type Expense {
    user:User @belongsTo
    income:Income @belongsTo
    name:String
    amount:Float
    created_at:DateTime
    updated_at:DateTime
}

extend type Mutation @guard {
    addExpense(name:String!, amount:Float!, date:String): ExpenseMutation
}

extend type Mutation @guard {
    updateExpense(id:Int!, name:String, amount:Float): ExpenseMutation
}

extend type Mutation @guard {
    deleteExpense(id:Int!): ExpenseMutation
}

extend type Query @guard {
    dailyExpenses(number:Int, page:Int, date:String! @rules(apply: ["date_format:Y-m-d"]), all:Boolean): ExpenseQuery
}

extend type Query @guard {
    weeklyExpenses(number:Int, page:Int, date:String! @rules(apply: ["date_format:Y-m-d"]), all:Boolean): ExpenseQuery
}

extend type Query @guard {
    incomeExpenses(income_id:Int!, number:Int, page:Int, all:Boolean): ExpenseQuery
}

extend type Query @guard {
    searchExpenses(searchTerm:String!, number:Int, page:Int, all:Boolean): ExpenseQuery
}

extend type Query @guard {
    compareWeekExpenses(weekOne:String! @rules(apply: ["date_format:Y-m-d"]), weekTwo:String! @rules(apply: ["date_format:Y-m-d"])): CompareWeekExpenses
}

type ExpenseMutation {
    message:String
    expense:Expense
    errorId:String
}

type ExpenseQuery {
    expenses:[Expense!]
    sum:Float,
    pagination:Pagination
    message:String
    errorId:String
}

type CompareWeekExpenses {
    weeks:[[Float!]]
    sums:[Float!]
    startDates:[String]
    endDates:[String]
}
