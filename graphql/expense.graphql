
type Expense {
    user:User @belongsTo
    income:Income @belongsTo
    name:String
    amount:Float
    time:String
    created_at: DateTime
    updated_at: DateTime
}

extend type Mutation @guard {
    addExpense(name:String!, amount:Float!, date:String): ExpenseAction
}

extend type Mutation @guard {
    updateExpense(id:ID!, name:String, amount:Float): ExpenseAction
}

extend type Mutation @guard {
    deleteExpense(id:ID!): ExpenseAction
}

extend type Query @guard {
    expenseStats(name:String!): ExpenseStats
}

extend type Query @guard {
    dailyExpenses(number:Int, page:Int, date:String! @rules(apply: ["date_format:Y-m-d"]), all:Boolean): Expenses
}

extend type Query @guard {
    weeklyExpenses(number:Int, page:Int, days:Int , date:String! @rules(apply: ["date_format:Y-m-d"]), all:Boolean): Expenses
}

extend type Query @guard {
    incomeExpenses(number:Int, page:Int, date: String! @rules(apply:["date_format:Y-m-d"]) all:Boolean): Expenses
}

extend type Query @guard {
    searchExpenses(searchTerm:String!, number:Int, page:Int, all:Boolean): Expenses
}

extend type Query @guard {
    compareWeekExpenses(weekOne:String! @rules(apply: ["date_format:Y-m-d"]), weekTwo:String! @rules(apply: ["date_format:Y-m-d"])): CompareWeekExpenses
}

extend type Query @guard {
    topExpenses(id: ID): JSON
}

type ExpenseAction {
    message:String
    expense:Expense
    sum:Float
    errorId:String
}

type Expenses {
    expenses:[Expense!]!
    sum:Float,
    pagination:Pagination
    message:String
    errorId:String
}

type ExpenseStats {
    name: String
    total: Float
    first_recorded: DateTime
    last_recorded: DateTime
    times_recorded: Int
    errorId: String
    message: String
}

type CompareWeekExpenses {
    weeks:[[Float!]]
    sums:[Float!]
    startDates:[String]
    endDates:[String]
}
